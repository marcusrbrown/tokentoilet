---
description: This rule outlines best practices for Hardhat development, covering code organization, security, testing, performance, and tooling, ensuring robust and maintainable smart contract applications.
globs: **/*.sol
alwaysApply: False
---
# Hardhat Smart Contract Development Best Practices

This document provides a comprehensive guide to best practices for developing secure, efficient, and maintainable smart contracts using Hardhat.

## 1. Code Organization and Structure

### Directory Structure


hardhat-project/
├── contracts/              # Solidity smart contracts
│   ├── MyContract.sol
│   └── ...
├── scripts/                # Deployment and interaction scripts
│   ├── deploy.js
│   └── ...
├── test/                   # Tests for smart contracts
│   ├── MyContract.test.js
│   └── ...
├── hardhat.config.js       # Hardhat configuration file
├── package.json            # Project dependencies and scripts
├── README.md               # Project documentation
├── .env                   # Environment variables (API keys, private keys)
└── .gitignore


### File Naming Conventions

*   **Solidity Contracts:** `MyContract.sol` (PascalCase).
*   **Scripts:** `deploy.js`, `interact.js` (camelCase).
*   **Tests:** `MyContract.test.js` (camelCase with `.test` suffix).
*   **Libraries:** `MyLibrary.sol`
*   **Interfaces:** `IMyInterface.sol`

### Module Organization

*   **Separate Concerns:**  Divide contracts based on functionality (e.g., core logic, access control, data storage).
*   **Libraries:**  Use libraries for reusable code and complex logic.
*   **Interfaces:** Define interfaces for contract interactions to improve modularity and reduce dependencies.

### Component Architecture

*   **Follow SOLID Principles:**
    *   **Single Responsibility Principle:** Each contract should have one specific responsibility.
    *   **Open/Closed Principle:** Contracts should be open for extension but closed for modification (use inheritance carefully).
    *   **Liskov Substitution Principle:** Subtypes must be substitutable for their base types.
    *   **Interface Segregation Principle:** Clients should not be forced to depend upon interfaces they do not use.
    *   **Dependency Inversion Principle:** High-level modules should not depend on low-level modules. Both should depend on abstractions.
*   **Proxy Patterns:** Consider using proxy patterns for upgradeable contracts (e.g., UUPS, Transparent Proxy).
*   **Composition over Inheritance:** Favor composition over inheritance to increase flexibility and reduce complexity.

### Code Splitting

*   **Libraries:** Move reusable functions and logic into libraries.
*   **Diamond Pattern:**  For very large contracts, explore the Diamond pattern (EIP-2535) to split functionality into facets.
*   **External Contracts:**  Delegate complex computations or data storage to separate, specialized contracts.

## 2. Common Patterns and Anti-patterns

### Design Patterns

*   **Ownable:** Restrict access to certain functions to an owner.
*   **Pausable:**  Provide a mechanism to pause contract functionality in case of an emergency.
*   **Pull over Push:** Prefer users to withdraw funds (pull) instead of automatically sending (push) to them.
*   **Circuit Breaker:** Implement a circuit breaker pattern to prevent cascading failures.
*   **Access Control:** Implement robust access control using role-based access control (RBAC) or similar mechanisms.
*   **Upgradeable Proxy Patterns (UUPS, Transparent Proxy, Beacon Proxy):** Enable contract upgrades without losing data or functionality.

### Recommended Approaches

*   **Use OpenZeppelin Contracts:** Leverage OpenZeppelin's audited and secure smart contract implementations.
*   **Consistent Error Handling:** Implement a standard error handling mechanism throughout your contracts.
*   **Gas Optimization:**  Write gas-efficient code to minimize transaction costs.
*   **Event Emission:**  Emit events for important state changes to enable off-chain monitoring and indexing.
*   **Use Chainlink Price Feeds:** Utilize Chainlink oracles for reliable and decentralized price data.

### Anti-patterns and Code Smells

*   **Unchecked Arithmetic:** Use SafeMath or Solidity 0.8+ with overflow/underflow protection.
*   **Reentrancy:**  Protect against reentrancy attacks using the checks-effects-interactions pattern.
*   **Timestamp Dependence:** Avoid relying on block timestamps for critical logic (can be manipulated by miners).
*   **Integer Overflow/Underflow:**  Always check for overflow and underflow, especially in older Solidity versions.
*   **Delegatecall Vulnerabilities:** Use delegatecall carefully and ensure the target contract is trusted.
*   **Short Address Attack:** Pad short addresses correctly to prevent data corruption.
*   **TX.ORIGIN:** Avoid using `tx.origin` for authorization (can be spoofed by malicious contracts).
*   **Ignoring Return Values:** Always check the return values of external calls to prevent unexpected failures.
*   **Centralized Ownership:** Distribute control and ownership to avoid single points of failure.
*   **Magic Numbers:** Avoid using hardcoded values. Use named constants instead.
*   **Overcomplicated Logic:** Keep functions simple and easy to understand.

### State Management

*   **Minimize Storage Reads/Writes:**  Storage operations are expensive; cache data in memory when possible.
*   **Use Structs and Mappings Efficiently:**  Pack data into structs to reduce storage costs.
*   **Immutable Variables:** Use `immutable` variables for values that are set during contract creation and never change.
*   **Event Logging:** Use events to track state changes and enable off-chain monitoring.
*   **Proper Data Structures:** Utilize appropriate data structures (e.g., mappings, arrays, linked lists) for efficient data storage and retrieval.

### Error Handling

*   **Require Statements:** Use `require()` for preconditions and input validation.
*   **Revert Statements:**  Use `revert()` for critical errors that should halt execution.
*   **Custom Errors (Solidity 0.8.4+):** Define custom errors for better error messages and gas efficiency.
*   **Error Codes:** Return specific error codes from functions to provide more information about failures.
*   **Try/Catch (Solidity 0.8.16+):** Use `try/catch` blocks to handle errors from external calls.

## 3. Performance Considerations

### Optimization Techniques

*   **Gas Profiling:** Use Hardhat's gas reporting tools to identify gas-expensive operations.
*   **Storage Optimization:** Minimize storage reads and writes.
*   **Assembly Optimization:**  Use inline assembly (Yul) for critical performance bottlenecks (use with caution).
*   **Function Selectors:**  Keep frequently called functions early in the contract to optimize dispatch.
*   **Data Packing:** Pack data into the smallest possible storage slots to reduce gas costs.
*   **Short Circuiting:** Order conditions in `if` statements to short-circuit the most likely cases.

### Memory Management

*   **Use Memory Sparingly:**  Memory is more expensive than storage; only use it when necessary.
*   **Avoid Large Arrays in Memory:**  Large arrays can consume excessive gas.
*   **Delete Unused Memory:** Explicitly delete unused memory variables to free up resources.

### Bundle Size Optimization

*   **Minimize Dependencies:** Only include the necessary dependencies in your project.
*   **Tree Shaking (if applicable):** Remove unused code from your dependencies.
*   **Code Splitting:** Break down large contracts into smaller, more manageable modules.

### Lazy Loading

*   **On-Demand Initialization:** Initialize data structures only when they are needed.
*   **Dynamic Loading of Libraries:** Load libraries only when they are used.

## 4. Security Best Practices

### Common Vulnerabilities

*   **Reentrancy:**  Prevent reentrancy attacks using the checks-effects-interactions pattern.
*   **Overflow/Underflow:** Use SafeMath or Solidity 0.8+ with overflow/underflow protection.
*   **Front Running:**  Protect against front running by using commit-reveal schemes or other techniques.
*   **Denial of Service (DoS):**  Design contracts to be resilient against DoS attacks.
*   **Delegatecall Vulnerabilities:** Use delegatecall carefully and ensure the target contract is trusted.
*   **Timestamp Dependence:** Avoid relying on block timestamps for critical logic (can be manipulated by miners).
*   **Unhandled Exceptions:** Properly handle exceptions from external calls to prevent unexpected failures.
*   **Improper Access Control:** Implement robust access control mechanisms to prevent unauthorized access.

### Input Validation

*   **Require Statements:** Use `require()` to validate all inputs.
*   **Sanitize Inputs:** Sanitize inputs to prevent malicious data from corrupting state.
*   **Check Data Types:** Ensure inputs are of the correct data type.
*   **Limit Input Lengths:** Restrict the length of input strings and arrays to prevent buffer overflows.
*   **Valid Ranges:** Check that numeric inputs are within valid ranges.

### Authentication and Authorization

*   **Ownable:** Restrict access to certain functions to an owner.
*   **Role-Based Access Control (RBAC):**  Implement RBAC using OpenZeppelin's `AccessControl` contract.
*   **Multi-Signature Wallets:**  Require multiple signatures to authorize critical actions.
*   **Authentication Tokens:** Use authentication tokens to verify the identity of callers.

### Data Protection

*   **Encryption (off-chain):**  Encrypt sensitive data off-chain before storing it on the blockchain (consider the implications for data availability).
*   **Hashing:** Hash sensitive data before storing it on the blockchain (one-way transformation).
*   **Secret Management:**  Store sensitive secrets (API keys, private keys) securely using environment variables and `.env` files.
*   **Data Minimization:** Only store the necessary data on the blockchain.
*   **Zero-Knowledge Proofs:** Explore zero-knowledge proofs for preserving data privacy while enabling verification.

### Secure API Communication

*   **HTTPS:** Use HTTPS for all API communication to protect against eavesdropping.
*   **API Keys:** Use API keys to authenticate API requests.
*   **Rate Limiting:** Implement rate limiting to prevent abuse.
*   **Input Validation:** Validate all API inputs to prevent injection attacks.
*   **Output Encoding:** Encode API outputs to prevent cross-site scripting (XSS) attacks.

## 5. Testing Approaches

### Unit Testing

*   **Isolate Components:**  Test individual functions and contracts in isolation.
*   **Test Driven Development (TDD):** Write tests before writing code.
*   **Edge Cases:** Test edge cases and boundary conditions.
*   **Error Cases:**  Test error handling logic.
*   **Gas Usage:**  Test gas usage to identify potential optimizations.

### Integration Testing

*   **Test Contract Interactions:** Test how contracts interact with each other.
*   **Test External Dependencies:**  Test how contracts interact with external services (e.g., Chainlink oracles).
*   **Test Upgrade Scenarios:**  Test contract upgrade processes.

### End-to-End Testing

*   **Simulate Real-World Scenarios:**  Simulate real-world user flows and interactions.
*   **Test User Interface:**  Test the user interface to ensure it works correctly with the smart contracts.
*   **Test Deployment Process:**  Test the deployment process to ensure it is smooth and reliable.

### Test Organization

*   **Separate Test Files:**  Create separate test files for each contract.
*   **Descriptive Test Names:**  Use descriptive test names to clearly indicate what is being tested.
*   **Arrange-Act-Assert Pattern:**  Follow the arrange-act-assert pattern in your tests.
*   **Use beforeEach Hooks:** Use `beforeEach` hooks to set up test environments.

### Mocking and Stubbing

*   **Mock External Dependencies:**  Mock external dependencies to isolate contracts during testing.
*   **Stub Function Calls:**  Stub function calls to control the behavior of contracts during testing.
*   **Use Hardhat's Mock Provider:**  Use Hardhat's mock provider for faster and more deterministic testing.

## 6. Common Pitfalls and Gotchas

*   **Hardhat Network Resetting:** Understand how Hardhat Network resets its state between tests.
*   **Improper Use of `await`:** Always `await` asynchronous calls in JavaScript tests.
*   **Mismatched Solidity Versions:** Ensure consistent Solidity compiler versions throughout your project.
*   **Insufficient Gas Limits:** Provide sufficient gas limits for transactions.
*   **Incorrect Units:**  Use the correct units (e.g., wei, gwei, ether) for Ether values.
*   **Private Key Management:** Never commit private keys to your repository.
*   **Data Availability Issues (Encryption):** Understand the trade-offs between data privacy and data availability when using encryption on-chain.

## 7. Tooling and Environment

### Recommended Development Tools

*   **Visual Studio Code (VS Code):**  Popular code editor with Solidity support.
*   **Hardhat VS Code Extension:**  Provides syntax highlighting, code completion, and other features for Solidity development.
*   **Remix IDE:**  Web-based IDE for Solidity development.
*   **Slither:**  Static analysis tool for detecting vulnerabilities in Solidity code.
*   **Etherscan:**  Blockchain explorer for inspecting transactions and contracts.
*   **Truffle:** Another popular Ethereum development framework (consider migrating to Hardhat).

### Build Configuration

*   **Use `hardhat.config.js`:** Configure Hardhat settings in `hardhat.config.js`.
*   **Define Networks:**  Define different networks (e.g., localhost, testnet, mainnet) in `hardhat.config.js`.
*   **Specify Compiler Versions:** Specify the Solidity compiler version in `hardhat.config.js`.
*   **Configure Gas Reporting:** Configure gas reporting in `hardhat.config.js` to analyze gas usage.
*   **Use Environment Variables:** Load sensitive configuration values (API keys, private keys) from environment variables using `dotenv`.

### Linting and Formatting

*   **Solhint:**  Linter for Solidity code.
*   **Prettier:**  Code formatter for Solidity code.
*   **EditorConfig:**  Maintain consistent coding styles across different editors.
*   **Use Husky and Lint-Staged:** Integrate linting and formatting into your Git workflow.

### Deployment

*   **Use Hardhat Deploy:**  Use Hardhat Deploy plugin for managing contract deployments.
*   **Verify Contracts on Etherscan:**  Verify contracts on Etherscan to make the source code publicly available.
*   **Use Multi-Signature Wallets:**  Use multi-signature wallets to manage contract ownership.
*   **Consider Using a DAO for Governance:** Decentralize contract ownership using a Decentralized Autonomous Organization (DAO).
*   **Gas Price Considerations:** Be mindful of gas prices and use appropriate gas limits for deployment transactions.

### CI/CD Integration

*   **Use GitHub Actions or Similar:**  Automate testing, linting, formatting, and deployment using CI/CD pipelines.
*   **Run Tests on Every Commit:**  Run unit tests and integration tests on every commit.
*   **Automate Contract Verification:**  Automate contract verification on Etherscan.
*   **Deploy to Testnets Automatically:**  Automatically deploy contracts to testnets for testing and staging.

By following these best practices, you can develop secure, efficient, and maintainable smart contracts using Hardhat.