---
description: Provides comprehensive best practices for using the wagmi library, covering code organization, performance, security, testing, and common pitfalls. Aims to guide developers in building robust and maintainable web3 applications.
globs: **/*.ts,**/*.tsx,**/*.js,**/*.jsx
alwaysApply: false
---
---
## wagmi Best Practices

This document outlines best practices for developing web3 applications using the wagmi library. It covers code organization, common patterns, performance, security, testing, common pitfalls, tooling, and environment setup.

### 1. Code Organization and Structure

#### Directory Structure


project-root/
├── src/
│   ├── components/
│   │   ├── common/
│   │   │   ├── Button.tsx
│   │   │   └── LoadingSpinner.tsx
│   │   ├── web3/
│   │   │   ├── ConnectWallet.tsx
│   │   │   ├── TransactionStatus.tsx
│   │   │   └── ContractInteraction.tsx
│   │   └── pages/
│   │       ├── Home.tsx
│   │       └── MintToken.tsx
│   ├── hooks/
│   │   ├── useContract.ts
│   │   ├── useTokenBalance.ts
│   │   └── useTransaction.ts
│   ├── contexts/
│   │   └── Web3Context.tsx
│   ├── utils/
│   │   ├── contractUtils.ts
│   │   └── formatting.ts
│   ├── abis/
│   │   └── ERC20.json
│   ├── wagmi.config.ts
│   ├── App.tsx
│   └── index.tsx
├── public/
├── styles/
├── .env
├── package.json
├── tsconfig.json
└── README.md


*   **src/:** Contains all source code.
*   **components/:** React components, further divided into:
    *   **common/:** Reusable UI components.
    *   **web3/:** Wagmi-specific components.
    *   **pages/:** Page-level components.
*   **hooks/:** Custom React hooks, often wrapping wagmi hooks.
*   **contexts/:** React Contexts for managing global state (e.g., Web3Provider).
*   **utils/:** Utility functions (e.g., formatting, contract interaction helpers).
*   **abis/:** JSON files containing smart contract ABIs.
*   **wagmi.config.ts:** wagmi configuration file

#### File Naming Conventions

*   React components: kebab-case (.tsx or .jsx).
*   Hooks: `use` prefix (e.g., `use-token-balance.ts`).
*   Contexts: kebab-case with 'context' suffix (e.g., `web3-context.tsx`).
*   Utility functions: kebab-case (.ts or .js).
*   ABIs: ContractName.json (e.g., `ERC20.json`).

#### Module Organization

*   Group related functionalities into modules (e.g., contract interactions, wallet management).
*   Use named exports for better tree-shaking.
*   Create separate modules for types/interfaces.

#### Component Architecture

*   Favor functional components with hooks.
*   Separate concerns using custom hooks for wagmi logic.
*   Use a presentational/container component pattern to separate data fetching and UI rendering.

#### Code Splitting

*   Use React.lazy and Suspense for route-based code splitting.
*   Consider component-level code splitting for large or less-frequently used components.

### 2. Common Patterns and Anti-patterns

#### Design Patterns

*   **Hook Composition:** Combine wagmi hooks within custom hooks to create reusable web3 logic.
*   **Context Provider Pattern:** Manage global web3 state (e.g., provider, signer) using React Context.
*   **Facade Pattern:** Create a simplified interface for complex contract interactions.

#### Recommended Approaches

*   **Wallet Connection:** Use `useConnect` and `useDisconnect` hooks for managing wallet connections.
*   **Contract Interaction:** Use `useContractRead` and `useContractWrite` hooks for reading and writing to smart contracts.
*   **Event Listening:** Use `useContractEvent` hook to listen for smart contract events.
*   **Balance Retrieval**: Use `useBalance` to fetch token balances.

#### Anti-patterns and Code Smells

*   **Directly Mutating Wagmi State:** Avoid directly modifying the wagmi config state outside of established patterns.
*   **Over-relying on Global State:**  Avoid putting everything into a single context. Break contexts into smaller, focused ones.
*   **Hardcoding Chain IDs:** Store chain IDs in a configuration file/environment variable.

#### State Management

*   **React Context:** For global web3 state (e.g., connected wallet, provider).
*   **TanStack Query:** wagmi uses TanStack Query internally for caching, deduplication, and persistence of data fetched from the blockchain.

#### Error Handling

*   Use `try...catch` blocks when interacting with contracts, especially during write operations.
*   Display user-friendly error messages.
*   Implement error logging for debugging.
*   Utilize the `onError` callbacks provided by Wagmi hooks for error handling within those operations.

### 3. Performance Considerations

#### Optimization Techniques

*   **Tree-shaking:** Use ES modules to allow for dead code elimination.
*   **Caching:** Leverage wagmi's built-in caching mechanisms via TanStack Query.
*   **Memoization:** Use `React.memo` or `useMemo` to prevent unnecessary re-renders of components.
*   **Debouncing/Throttling:** Apply debouncing or throttling to frequently triggered events (e.g., input changes).

#### Memory Management

*   Clean up event listeners when components unmount.
*   Avoid creating large, unnecessary data structures.

#### Rendering Optimization

*   Use virtualization libraries for rendering large lists of data.
*   Optimize rendering performance with tools like React Profiler.

#### Bundle Size Optimization

*   Use code splitting to reduce initial bundle size.
*   Remove unused dependencies.
*   Use smaller alternatives for large libraries.

#### Lazy Loading

*   Implement lazy loading for components and modules that are not immediately needed.

### 4. Security Best Practices

#### Common Vulnerabilities

*   **Private Key Exposure:** Never commit private keys to your codebase.
*   **Transaction Replay Attacks:** Implement measures to prevent transaction replay attacks, such as nonces.
*   **Integer Overflow/Underflow:** Be cautious of integer overflow/underflow vulnerabilities in smart contracts.
*   **Cross-Site Scripting (XSS):** Sanitize user inputs to prevent XSS attacks.

#### Input Validation

*   Validate user inputs on both the client-side and server-side (if applicable).
*   Sanitize inputs to prevent script injection.

#### Authentication and Authorization

*   Use secure wallet connection methods.
*   Implement role-based access control for sensitive operations.

#### Data Protection

*   Store sensitive data securely (e.g., encrypted local storage).
*   Use HTTPS for all communication with the blockchain.

#### Secure API Communication

*   Use secure protocols (HTTPS) for API requests.
*   Implement proper authentication and authorization for API endpoints.

### 5. Testing Approaches

#### Unit Testing

*   Test individual components and functions in isolation.
*   Mock external dependencies (e.g., wagmi hooks, contract methods).
*   Use testing libraries like Jest and React Testing Library.

#### Integration Testing

*   Test the interaction between multiple components and modules.
*   Use a test blockchain environment (e.g., Ganache) for integration tests.

#### End-to-End Testing

*   Test the entire application flow from the user interface to the blockchain.
*   Use end-to-end testing frameworks like Cypress or Playwright.

#### Test Organization

*   Organize tests into separate directories (e.g., `__tests__`).
*   Use descriptive test names.

#### Mocking and Stubbing

*   Use mocking libraries like Jest's `jest.mock` to mock wagmi hooks and contract methods.
*   Use stubbing to replace real dependencies with test-specific implementations.

### 6. Common Pitfalls and Gotchas

*   **Incorrect ABI:** Using an outdated or incorrect ABI can lead to unexpected errors.
*   **Chain ID Mismatch:** Ensure the application is connected to the correct blockchain network.
*   **Gas Limit Issues:** Insufficient gas limits can cause transaction failures.
*   **Revert Errors:** Understand and handle smart contract revert errors gracefully.
*   **Asynchronous Operations:**  wagmi often involves asynchronous operations. Handle Promises and async/await correctly to prevent race conditions.

### 7. Tooling and Environment

#### Recommended Development Tools

*   **IDE:** VS Code with TypeScript support.
*   **Browser Extension:** MetaMask or similar wallet extension.
*   **Local Blockchain:** Ganache or Hardhat Network.
*   **Debugging Tools:** React DevTools, browser developer tools.

#### Build Configuration

*   Use a build tool like webpack or Parcel.
*   Configure TypeScript for strict type checking.
*   Optimize build settings for production.

#### Linting and Formatting

*   Use ESLint and Prettier for code linting and formatting.
*   Configure linting rules to enforce coding standards and best practices.

#### Deployment

*   Deploy the application to a static hosting provider (e.g., Netlify, Vercel).
*   Use environment variables for sensitive configuration data.

#### CI/CD Integration

*   Integrate with a CI/CD pipeline (e.g., GitHub Actions, GitLab CI) for automated testing and deployment.
